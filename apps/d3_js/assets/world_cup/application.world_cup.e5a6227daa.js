!function(e){function t(t){for(var r,u,i=t[0],c=t[1],l=t[2],f=0,d=[];f<i.length;f++)u=i[f],a[u]&&d.push(a[u][0]),a[u]=0;for(r in c)Object.prototype.hasOwnProperty.call(c,r)&&(e[r]=c[r]);for(s&&s(t);d.length;)d.shift()();return o.push.apply(o,l||[]),n()}function n(){for(var e,t=0;t<o.length;t++){for(var n=o[t],r=!0,i=1;i<n.length;i++){var c=n[i];0!==a[c]&&(r=!1)}r&&(o.splice(t--,1),e=u(u.s=n[0]))}return e}var r={},a={2:0},o=[];function u(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,u),n.l=!0,n.exports}u.m=e,u.c=r,u.d=function(e,t,n){u.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},u.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},u.t=function(e,t){if(1&t&&(e=u(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(u.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)u.d(n,r,function(t){return e[t]}.bind(null,r));return n},u.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return u.d(t,"a",t),t},u.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},u.p="";var i=window.webpackJsonp=window.webpackJsonp||[],c=i.push.bind(i);i.push=t,i=i.slice();for(var l=0;l<i.length;l++)t(i[l]);var s=c;o.push([1,0]),n()}({1:function(e,t,n){"use strict";n.r(t);n(8);var r=n(2);!function(){var e=r.select("#vis-box").append("svg").style("background","#a8bcc7").style("border","1px solid #000").attr("width",1200).attr("height",750).append("g").attr("class","map"),t=r.geoMercator().scale(190).translate([600,475]),n=r.geoPath().projection(t),a=function(){var e=r.select("#vis-box").append("div").attr("class","tooltip"),t=5,n=5;function a(r,a){var o=window.innerWidth,u=window.innerHeight,i=e.node().offsetWidth,c=e.node().offsetHeight;return r+i>o?r-=i+t:r+=t,a+c>u?a-=c+n:a+=n,[r,a]}return{update:function(t,n,o){e.style("display","block"),e.transition().duration(500).ease(r.easeCubicOut).style("opacity",.7),e.html("<h2>Home:".concat(o.value.home,"</h2>\n          <ul>\n            <li>Year:").concat(o.key,"</li>\n            <li>Total Attendance: ").concat(o.value.attendance,"</li>\n            <li>Team Number: ").concat(o.value.teamNumber,"</li>\n          </ul>"));var u=a(t,n);e.style("left",u[0]+"px").style("top",u[1]+"px")},off:function(){e.transition().duration(300).on("end",function(){e.style("display","none")}).ease(r.easeCubicOut).style("opacity",0)},move:function(t,n){var r=a(t,n);e.style("left",r[0]+"px").style("top",r[1]+"px")}}}(),o=function(){var t=void 0,r="#f3e3d4",a="#a8bcc7";return{init:function(o){return t=e.selectAll("path").data(o.features).enter().append("path").attr("fill",r).attr("stroke",a).attr("stroke-width",.5).attr("d",n)},highlight:function(e){return t.transition().duration(500).style("fill",function(t){return e.has(t.properties.name)?"rgb(212, 88, 88)":r}),t},reset:function(){t.transition().duration(300).style("fill",r).style("stroke",a)}}}(),u=function(){var t=void 0,n=void 0,a=void 0,o=void 0,u=void 0;return{init:function(i,c,l){n=c,u=l;var s=r.extent(i,function(e){return e.value.attendance});return t=r.scaleSqrt().domain(s).range([4,20]),a=e.append("g").attr("class","bubbles"),o=a.selectAll("circle").data(i,n).enter().append("circle").attr("r",function(e){return t(e.value.attendance)}).attr("cx",function(e){return e.value.x}).attr("cy",function(e){return e.value.y}),u&&u(o),o},render:function(e){var r=a.selectAll("circle").data(e,n);return r.exit().remove(),(o=r.enter().append("circle").merge(r).attr("cx",function(e){return e.value.x}).attr("cy",function(e){return e.value.y})).transition().duration(500).attr("r",function(e){return t(e.value.attendance)}),u&&u(o),o}}}();function i(e){var n=function(e){return r.nest().key(function(e){return e.date.getUTCFullYear()}).rollup(function(e){var n=r.sum(e,function(e){return e.attendance}),a=e.map(function(e){return t([+e.long,+e.lat])}),o=r.mean(a,function(e){return e[0]}),u=r.mean(a,function(e){return e[1]}),i=r.set();return e.forEach(function(e){i.add(e.team1),i.add(e.team2)}),{attendance:n,x:o,y:u,teams:i,home:e[0].home,year:e[0].year,teamNumber:i.size()}}).entries(e)}(e);u.init(n.sort(function(e,t){return t.value.attendance-e.value.attendance}),function(e){return e.key},function(e){e.on("mouseover",function(e){a.update(r.event.pageX,r.event.pageY,e);var t=n.filter(function(t){return new Date(t.key).getFullYear()===parseInt(e.key)});o.highlight(t[0].value.teams)}).on("mousemove",function(e){a.move(r.event.pageX,r.event.pageY)}).on("mouseout",function(e){a.off(),o.reset()})});var i=function(e,t,n){for(var r=[],a=e;a<=t;a+=n)1942!==a&&1946!==a&&r.push(a);return r}(1930,2015,4);r.select("#vis-box").append("ul").attr("class","button__list-row").selectAll("li").data(i).enter().append("li").attr("class","button").append("button").text(function(e){return e}).on("mouseover",function(e){var t=n.filter(function(t){return new Date(t.key).getFullYear()===e});o.highlight(t[0].value.teams),u.render(t)}).on("mouseout",function(){o.reset(),u.render(n).on("mouseover",function(e){a.update(r.event.pageX,r.event.pageY,e);var t=n.filter(function(t){return new Date(t.key).getFullYear()===parseInt(e.key)});o.highlight(t[0].value.teams)}).on("mousemove",function(e){a.move(r.event.pageX,r.event.pageY)}).on("mouseout",function(e){a.off(),o.reset()})})}r.json("../assets/world_countries.json").then(function(e){!function(e){o.init(e);var t=r.timeParse("%d-%m-%Y (%H:%M h)");r.tsv("../assets/world_cup/world_cup_geo.tsv",function(e){var n=t(e.date);return e.attendance=+e.attendance,e.date=n,e}).then(function(e){i(e)})}(e)})}()},8:function(e,t){}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,