!function(t){function e(e){for(var r,u,i=e[0],c=e[1],l=e[2],f=0,d=[];f<i.length;f++)u=i[f],o[u]&&d.push(o[u][0]),o[u]=0;for(r in c)Object.prototype.hasOwnProperty.call(c,r)&&(t[r]=c[r]);for(s&&s(e);d.length;)d.shift()();return a.push.apply(a,l||[]),n()}function n(){for(var t,e=0;e<a.length;e++){for(var n=a[e],r=!0,i=1;i<n.length;i++){var c=n[i];0!==o[c]&&(r=!1)}r&&(a.splice(e--,1),t=u(u.s=n[0]))}return t}var r={},o={0:0},a=[];function u(e){if(r[e])return r[e].exports;var n=r[e]={i:e,l:!1,exports:{}};return t[e].call(n.exports,n,n.exports,u),n.l=!0,n.exports}u.m=t,u.c=r,u.d=function(t,e,n){u.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},u.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},u.t=function(t,e){if(1&e&&(t=u(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(u.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)u.d(n,r,function(e){return t[e]}.bind(null,r));return n},u.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return u.d(e,"a",e),e},u.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},u.p="";var i=window.webpackJsonp=window.webpackJsonp||[],c=i.push.bind(i);i.push=e,i=i.slice();for(var l=0;l<i.length;l++)e(i[l]);var s=c;a.push([0,1]),n()}([function(t,e,n){n(1),t.exports=n(3)},function(t,e,n){var r=n(2);!function(){"use strict";var t=r.select("#vis-box").append("svg").style("background","#a8bcc7").style("border","1px solid #000").attr("width",1200).attr("height",750).append("g").attr("class","map"),e=r.geoMercator().scale(190).translate([600,475]),n=r.geoPath().projection(e),o=function(){var t=r.select("#vis-box").append("div").attr("class","tooltip"),e=5,n=5;function o(r,o){var a=window.innerWidth,u=window.innerHeight,i=t.node().offsetWidth,c=t.node().offsetHeight;return r+i>a?r-=i+e:r+=e,o+c>u?o-=c+n:o+=n,[r,o]}return{update:function(e,n,a){t.style("display","block"),t.transition().duration(500).ease(r.easeCubicOut).style("opacity",.7),t.html("<h2>Home:".concat(a.value.home,"</h2>\n          <ul>\n            <li>Year:").concat(a.key,"</li>\n            <li>Total Attendance: ").concat(a.value.attendance,"</li>\n            <li>Team Number: ").concat(a.value.teamNumber,"</li>\n          </ul>"));var u=o(e,n);t.style("left",u[0]+"px").style("top",u[1]+"px")},off:function(){t.transition().duration(300).on("end",function(){t.style("display","none")}).ease(r.easeCubicOut).style("opacity",0)},move:function(e,n){var r=o(e,n);t.style("left",r[0]+"px").style("top",r[1]+"px")}}}(),a=function(){var e=void 0,r="#f3e3d4",o="#a8bcc7";return{init:function(a){return e=t.selectAll("path").data(a.features).enter().append("path").attr("fill",r).attr("stroke",o).attr("stroke-width",.5).attr("d",n)},highlight:function(t){return e.transition().duration(500).style("fill",function(e){return t.has(e.properties.name)?"rgb(212, 88, 88)":r}),e},reset:function(){e.transition().duration(300).style("fill",r).style("stroke",o)}}}(),u=function(){var e=void 0,n=void 0,o=void 0,a=void 0,u=void 0;return{init:function(i,c,l){n=c,u=l;var s=r.extent(i,function(t){return t.value.attendance});return e=r.scaleSqrt().domain(s).range([4,20]),o=t.append("g").attr("class","bubbles"),a=o.selectAll("circle").data(i,n).enter().append("circle").attr("r",function(t){return e(t.value.attendance)}).attr("cx",function(t){return t.value.x}).attr("cy",function(t){return t.value.y}),u&&u(a),a},render:function(t){var r=o.selectAll("circle").data(t,n);return r.exit().remove(),(a=r.enter().append("circle").merge(r).attr("cx",function(t){return t.value.x}).attr("cy",function(t){return t.value.y})).transition().duration(500).attr("r",function(t){return e(t.value.attendance)}),u&&u(a),a}}}();function i(t){var n=function(t){return r.nest().key(function(t){return t.date.getUTCFullYear()}).rollup(function(t){var n=r.sum(t,function(t){return t.attendance}),o=t.map(function(t){return e([+t.long,+t.lat])}),a=r.mean(o,function(t){return t[0]}),u=r.mean(o,function(t){return t[1]}),i=r.set();return t.forEach(function(t){i.add(t.team1),i.add(t.team2)}),{attendance:n,x:a,y:u,teams:i,home:t[0].home,year:t[0].year,teamNumber:i.size()}}).entries(t)}(t);u.init(n.sort(function(t,e){return e.value.attendance-t.value.attendance}),function(t){return t.key},function(t){t.on("mouseover",function(t){o.update(r.event.pageX,r.event.pageY,t);var e=n.filter(function(e){return new Date(e.key).getFullYear()===parseInt(t.key)});a.highlight(e[0].value.teams)}).on("mousemove",function(t){o.move(r.event.pageX,r.event.pageY)}).on("mouseout",function(t){o.off(),a.reset()})});var i=function(t,e,n){for(var r=[],o=t;o<=e;o+=n)1942!==o&&1946!==o&&r.push(o);return r}(1930,2015,4);r.select("#vis-box").append("ul").attr("class","button__list-row").selectAll("li").data(i).enter().append("li").attr("class","button").append("button").text(function(t){return t}).on("mouseover",function(t){var e=n.filter(function(e){return new Date(e.key).getFullYear()===t});a.highlight(e[0].value.teams),u.render(e)}).on("mouseout",function(){a.reset(),u.render(n).on("mouseover",function(t){o.update(r.event.pageX,r.event.pageY,t);var e=n.filter(function(e){return new Date(e.key).getFullYear()===parseInt(t.key)});a.highlight(e[0].value.teams)}).on("mousemove",function(t){o.move(r.event.pageX,r.event.pageY)}).on("mouseout",function(t){o.off(),a.reset()})})}r.json("../assets/world_cup/world_countries.json").then(function(t){!function(t){a.init(t);var e=r.timeParse("%d-%m-%Y (%H:%M h)");r.tsv("../assets/world_cup/world_cup_geo.tsv",function(t){var n=e(t.date);return t.attendance=+t.attendance,t.date=n,t}).then(function(t){i(t)})}(t)})}()},,function(t,e){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,